module alchitry_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output

    // Ft Element
    input ft_clk,
    input ft_rxf,
    input ft_txe,
    inout ft_data[16],
    inout ft_be[2],
    output ft_rd,
    output ft_wr,
    output ft_oe,

    output saleae[8],

    // PC-G850 System Bus
    input z80_mreq,
    input z80_m1,
    input z80_ioreset,
    input z80_iorq,
    input z80_int1,
    input z80_wait,
    input z80_rd,
    input z80_wr,

    input data[8],
    input addr[16],

    input addr_bnk[2],
    input addr_ceram2,
    input addr_cerom2
) {
    sig rst

    enum States {IN, OUT}
    enum FtStates {GET_FIFO, STREAM}

    .clk(clk) {
        reset_conditioner reset_cond

        .rst(rst) {
            #BAUD(1_000_000), #CLK_FREQ(100_000_000) {
                uart_tx tx
                uart_rx rx
            }

            fifo fifo(#WIDTH(32), #ENTRIES(32768))
            dff fifo_full_counter[24] // 8 bytes for the Err code

            dff state[$width(States)]

            // TX_BUFFER(64)
            // RX_BUFFER(64)
            ft ft(#BUS_WIDTH(16), #TX_BUFFER(8192), .ft_clk(ft_clk), .ft_rxf(ft_rxf), .ft_txe(ft_txe), .ft_data(ft_data), .ft_be(ft_be))

            dff ft_enabled
            dff ft_cur_value[32]
            dff ft_state[$width(FtStates)]

            dff last_iorq
            dff last_mreq
            dff last_rd
            dff last_wr
            dff last_addr[16]
            dff last_data[8]
        }
    }

    sig saleae_rw[4]

    always {
        reset_cond.in = ~rst_n  // input raw inverted reset signal
        rst = reset_cond.out    // conditioned reset

        led = c{ft.ui_din_full, !ft.ui_dout_empty, !ft_rxf, !ft_txe,
                1b0, fifo.full, fifo.empty, ft_enabled.q}
        saleae_rw = 4h00

        usb_tx = tx.tx
        rx.rx = usb_rx
        tx.block = 0
        tx.data = 8h00
        tx.new_data = 0

        // fifo write
        fifo.wput = 0
        fifo.din = 8h00

        // fifo read
        fifo.rget = 0

        ft_rd = ft.ft_rd
        ft_wr = ft.ft_wr
        ft_oe = ft.ft_oe
        ft.ui_din = 0
        ft.ui_din_be = 0
        ft.ui_din_valid = 0
        ft.ui_dout_get = 0

        state.d = States.IN

        case (ft_state.q) {
            FtStates.GET_FIFO:
                if (!fifo.empty) {
                    if (!ft.ui_din_full) {
                        fifo.rget = 1

                        ft_cur_value.d = fifo.dout
                        ft.ui_din = fifo.dout[0+:16]
                        ft.ui_din_be = b11
                        ft.ui_din_valid = 1

                        ft_state.d = FtStates.STREAM
                    }
                }

            FtStates.STREAM:
                if (!ft.ui_din_full) {
                    fifo.rget = 1

                    ft.ui_din = ft_cur_value.q[16+:16]
                    ft.ui_din_be = b11
                    ft.ui_din_valid = 1

                    ft_state.d = FtStates.GET_FIFO
                }
        }

        case (state.q) {
            States.IN:
                if (rx.new_data) {
                    if (rx.data == "1") {
                        ft_enabled.d = 1
                        if (!tx.busy) {
                            tx.new_data = 1
                            tx.data = "+"
                        }
                    } else if (rx.data == "0") {
                        ft_enabled.d = 0
                        if (!tx.busy) {
                            tx.new_data = 1
                            tx.data = "-"
                        }
                    }
                }

/*
                if (!ft.ui_dout_empty) {
                    ft.ui_dout_get = 1
                    if (ft.ui_dout[0+:8] == "+") {
                        ft_enabled.d = 1
                        if (!tx.busy) {
                            tx.new_data = 1
                            tx.data = "+"
                        }
                    } else if (ft.ui_dout[0+:8] == "-") {
                        ft_enabled.d = 0
                        if (!tx.busy) {
                            tx.new_data = 1
                            tx.data = "-"
                        }
                    }
                }
*/

                if (!z80_mreq && last_mreq.q) {
                    last_addr.d = addr
                } else if (!z80_iorq && last_iorq.q) {
                    last_addr.d = addr
                }

                if (!last_mreq.q && z80_rd && !last_rd.q) {
                    // 1: Read
                    // stream data + last_addr
                    saleae_rw = b1

                    if (ft_enabled.q) {
                        if (!fifo.full) {
                            fifo.wput = 1
                            fifo.din = c{last_addr.q, data, "R"}
                        } else {
                            fifo_full_counter.d = fifo_full_counter.q + 1
                            tx.new_data = 1
                            tx.data = "R"
                        }
                    }
                } else if (!last_mreq.q && z80_wr && !last_wr.q) {
                    // 2: Write
                    // stream last_data + last_addr
                    saleae_rw = b10

                    if (ft_enabled.q) {
                        if (!fifo.full) {
                            fifo.wput = 1
                            fifo.din = c{last_addr.q, last_data.q, "W"}
                        } else {
                            fifo_full_counter.d = fifo_full_counter.q + 1
                            tx.new_data = 1
                            tx.data = "W"
                        }
                    }
                } else if (!last_iorq.q && z80_rd && !last_rd.q) {
                    // 3: IO Read
                    // data + last_addr
                    saleae_rw = b100

                    if (ft_enabled.q) {
                        if (!fifo.full) {
                            fifo.wput = 1
                            fifo.din = c{last_addr.q, data, "r"}
                        } else {
                            fifo_full_counter.d = fifo_full_counter.q + 1
                            tx.new_data = 1
                            tx.data = "r"
                        }
                    }
                } else if (!last_iorq.q && z80_wr && !last_wr.q) {
                    // 4: IO Write
                    // last_data + last_addr
                    saleae_rw = b1000

                    if (ft_enabled.q) {
                        if (!fifo.full) {
                            fifo.wput = 1
                            fifo.din = c{last_addr.q, last_data.q, "w"}
                        } else {
                            fifo_full_counter.d = fifo_full_counter.q + 1
                            tx.new_data = 1
                            tx.data = "w"
                        }
                    }
                } else if (ft_enabled.q && !fifo.full && fifo_full_counter.q > 0) {
                    fifo.wput = 1
                    fifo.din = c{fifo_full_counter.q, "E"}
                    fifo_full_counter.d = 0
                }

                last_iorq.d = z80_iorq
                last_mreq.d = z80_mreq
                last_rd.d = z80_rd
                last_wr.d = z80_wr
                last_data.d = data

            // States.OUT:
        }

        saleae = c{z80_ioreset, z80_wait, z80_int1, z80_m1, saleae_rw}
    }
}
