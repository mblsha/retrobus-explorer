module alchitry_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output

    inout ffc_data[48],

    output saleae[8]
) {
    sig rst
    enum States {RECEIVE, SEND}

    .clk(clk) {
        reset_conditioner reset_cond

        .rst(rst) {
            #BAUD(1_000_000), #CLK_FREQ(100_000_000) {
                uart_tx tx
                uart_rx rx
            }

            dff state[$width(States)]

            dff bank[8]
            dff counter[128]
        }
    }

    always {
        reset_cond.in = ~rst_n  // input raw inverted reset signal
        rst = reset_cond.out    // conditioned reset

        usb_tx = tx.tx
        rx.rx = usb_rx
        tx.block = 0

        tx.data = 8h00
        tx.new_data = 0

        led = 0
        saleae = 0
        ffc_data = 48x{1bz}

        case (state.q) {
            States.RECEIVE:
                led = ffc_data[(bank.q * 8)+:8]
                saleae = ffc_data[(bank.q * 8)+:8]

                if (rx.new_data) {
                    if (rx.data >= "0" && rx.data <= "5") {
                        bank.d = rx.data - "0"

                        if (!tx.busy) {
                            tx.new_data = 1
                            tx.data = rx.data
                        }
                    } else if (rx.data == "s" || rx.data == "S") {
                        if (!tx.busy) {
                            tx.new_data = 1
                            tx.data = rx.data
                        }

                        bank.d = 0
                        state.d = States.SEND
                    }
                }

            States.SEND:
                counter.d = counter.q + 1

                // using 8 doesn't allow to have a lot of granularity
                // when sampling only pin0 of ffc connector
                const out_bank_multiplier = 2

                led = counter.q[(bank.q * out_bank_multiplier)+:8]
                saleae = counter.q[(bank.q * out_bank_multiplier)+:8]
                ffc_data[0+:8] = counter.q[(bank.q * out_bank_multiplier)+:8]

                if (rx.new_data) {
                    if (rx.data >= "0" && rx.data <= "9") {
                        bank.d = rx.data - "0"

                        if (!tx.busy) {
                            tx.new_data = 1
                            tx.data = rx.data
                        }
                    } else if (rx.data == "r" || rx.data == "R") {
                        if (!tx.busy) {
                            tx.new_data = 1
                            tx.data = rx.data
                        }

                        bank.d = 0
                        state.d = States.RECEIVE
                    }
                }
        }
    }
}
