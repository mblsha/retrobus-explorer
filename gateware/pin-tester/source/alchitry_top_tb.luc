testbench alchitry_top_tb {
    sig clk
    sig rst_n
    sig usb_rx
    sig ffc_data[48]
    
    alchitry_top dut (
        .clk(clk),
        .rst_n(rst_n),
        .usb_rx(usb_rx),
        .ffc_data(ffc_data)
    )
    
    test resetBehaviorTest {
        $print("Starting reset behavior test...")
        
        // Initialize signals
        clk = 0
        rst_n = 1
        usb_rx = 1  // UART idle high
        ffc_data = 48h000000000000
        
        // Apply reset
        rst_n = 0
        repeat(10) {
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        
        // Release reset
        rst_n = 1
        repeat(10) {
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        
        // Verify initial state (RECEIVE mode, bank 0)
        $assert(dut.led == 8h00)
        $assert(dut.saleae == 8h00)
        $print("Reset test passed - LED and saleae outputs are 0")
    }
    
    test bankSwitchingTest {
        $print("Starting bank switching test...")
        
        // Initialize
        clk = 0
        rst_n = 1
        usb_rx = 1
        ffc_data = 48hFEDCBA987654  // Different pattern for each bank
        
        // Reset first
        rst_n = 0
        repeat(5) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        rst_n = 1
        repeat(5) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        
        // Test bank 0 (default)
        $assert(dut.led == 8h54)  // bits 7:0 of ffc_data
        $assert(dut.saleae == 8h54)
        $print("Bank 0: LED = %h (expected 54)", dut.led)
        
        // Switch to bank 1 - send ASCII '1'
        $print("Sending '1' to switch to bank 1...")
        
        // Start bit (low)
        usb_rx = 0
        repeat(100) {
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        
        // Data bits for '1' (0x31 = 0011 0001, LSB first = 1000 1100)
        usb_rx = 1  // bit 0
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        usb_rx = 0  // bit 1
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        usb_rx = 0  // bit 2
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        usb_rx = 0  // bit 3
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        usb_rx = 1  // bit 4
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        usb_rx = 1  // bit 5
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        usb_rx = 0  // bit 6
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        usb_rx = 0  // bit 7
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        
        // Stop bit (high)
        usb_rx = 1
        repeat(100) {
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        
        // Wait for response
        repeat(2000) {
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        
        // Let state settle
        repeat(10) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        
        $assert(dut.led == 8h76)  // bits 15:8 of ffc_data
        $assert(dut.saleae == 8h76)
        $print("Bank 1: LED = %h (expected 76)", dut.led)
        
        // Switch to bank 5 - send ASCII '5'
        $print("Sending '5' to switch to bank 5...")
        
        // Start bit
        usb_rx = 0
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        
        // Data bits for '5' (0x35 = 0011 0101, LSB first = 1010 1100)
        usb_rx = 1  // bit 0
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        usb_rx = 0  // bit 1
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        usb_rx = 1  // bit 2
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        usb_rx = 0  // bit 3
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        usb_rx = 1  // bit 4
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        usb_rx = 1  // bit 5
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        usb_rx = 0  // bit 6
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        usb_rx = 0  // bit 7
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        
        // Stop bit
        usb_rx = 1
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        
        // Wait for processing
        repeat(2000) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        
        $assert(dut.led == 8hFE)  // bits 47:40 of ffc_data
        $assert(dut.saleae == 8hFE)
        $print("Bank 5: LED = %h (expected FE)", dut.led)
        
        $print("Bank switching test passed!")
    }
    
    test stateMachineTest {
        $print("Starting state machine test...")
        
        // Initialize
        clk = 0
        rst_n = 1
        usb_rx = 1
        ffc_data = 48hAAAAAAAAAAAA
        
        // Reset
        rst_n = 0
        repeat(5) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        rst_n = 1
        repeat(5) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        
        // Verify RECEIVE mode
        $assert(dut.led == 8hAA)  // Reading from ffc_data[7:0]
        $print("RECEIVE mode: LED = %h (reading from ffc_data)", dut.led)
        
        // Switch to SEND mode - send ASCII 's'
        $print("Sending 's' to switch to SEND mode...")
        
        // Start bit
        usb_rx = 0
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        
        // Data bits for 's' (0x73 = 0111 0011, LSB first = 1100 1110)
        usb_rx = 1  // bit 0
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        usb_rx = 1  // bit 1
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        usb_rx = 0  // bit 2
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        usb_rx = 0  // bit 3
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        usb_rx = 1  // bit 4
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        usb_rx = 1  // bit 5
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        usb_rx = 1  // bit 6
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        usb_rx = 0  // bit 7
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        
        // Stop bit
        usb_rx = 1
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        
        // Wait for state change and counter to increment
        repeat(2000) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        
        // LED should now show counter bits, not ffc_data
        $assert(dut.led != 8hAA)
        $print("SEND mode: LED = %h (showing counter, not AA)", dut.led)
        
        // Verify counter is incrementing
        // Since we're in SEND mode with a counter, the LED value should change over time
        // We'll just verify it's not the same as the ffc_data pattern
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        $assert(dut.led != 8hAA)
        $print("Counter is incrementing: LED = %h (different from AA)", dut.led)
        
        // Switch back to RECEIVE mode - send ASCII 'r'
        $print("Sending 'r' to switch back to RECEIVE mode...")
        
        // Start bit
        usb_rx = 0
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        
        // Data bits for 'r' (0x72 = 0111 0010, LSB first = 0100 1110)
        usb_rx = 0  // bit 0
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        usb_rx = 1  // bit 1
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        usb_rx = 0  // bit 2
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        usb_rx = 0  // bit 3
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        usb_rx = 1  // bit 4
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        usb_rx = 1  // bit 5
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        usb_rx = 1  // bit 6
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        usb_rx = 0  // bit 7
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        
        // Stop bit
        usb_rx = 1
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        
        // Wait for state change
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        
        // Should be reading from ffc_data again
        ffc_data = 48h555555555555
        repeat(5) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        $assert(dut.led == 8h55)
        $print("Back in RECEIVE mode: LED = %h (reading ffc_data again)", dut.led)
        
        $print("State machine test passed!")
    }
    
    test invalidCommandTest {
        $print("Starting invalid command test...")
        
        // Initialize
        clk = 0
        rst_n = 1
        usb_rx = 1
        ffc_data = 48h123456789ABC
        
        // Reset
        rst_n = 0
        repeat(5) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        rst_n = 1
        repeat(5) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        
        // Verify initial bank 0
        $assert(dut.led == 8hBC)
        
        // Send invalid command 'x'
        $print("Sending invalid command 'x'...")
        
        // Start bit
        usb_rx = 0
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        
        // Data bits for 'x' (0x78 = 0111 1000, LSB first = 0001 1110)
        usb_rx = 0  // bit 0
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        usb_rx = 0  // bit 1
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        usb_rx = 0  // bit 2
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        usb_rx = 1  // bit 3
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        usb_rx = 1  // bit 4
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        usb_rx = 1  // bit 5
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        usb_rx = 1  // bit 6
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        usb_rx = 0  // bit 7
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        
        // Stop bit
        usb_rx = 1
        repeat(100) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        
        // Wait
        repeat(200) { 
            clk = 0
            $tick()
            clk = 1
            $tick()
        }
        
        // Should still be in RECEIVE mode, bank 0
        $assert(dut.led == 8hBC)
        $print("Invalid command ignored - still in bank 0, RECEIVE mode")
        
        $print("Invalid command test passed!")
    }
}