module alchitry_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output

    // Ft Element
    input ft_clk,
    input ft_rxf,
    input ft_txe,
    inout ft_data[16],
    inout ft_be[2],
    output ft_rd,
    output ft_wr,
    output ft_oe,

    output saleae[8],

    // Sharp Organizer Card Connector
    input conn_rw,
    input conn_oe,
    input conn_ci,
    input conn_e2,

    input conn_mskrom,
    input conn_sram1,
    input conn_sram2,
    input conn_eprom,
    input conn_stnby,
    input conn_vbatt,
    input conn_vpp,

    input addr[20],
    input data[8]
) {
    sig rst

    enum FtStates {GET_FIFO, STREAM}
    enum SaleaeStates {SYNC_SIGNALS, COUNTER}

    sig conn_rw_sync
    sig conn_oe_sync
    sig conn_ci_sync
    sig conn_e2_sync

    sig conn_mskrom_sync
    sig conn_sram1_sync
    sig conn_sram2_sync
    sig conn_eprom_sync
    sig conn_stnby_sync
    sig conn_vbatt_sync
    sig conn_vpp_sync

    const NUM_MISC_SIGNALS = 11
    sig misc_sync[NUM_MISC_SIGNALS]

    sig addr_sync[20]
    sig data_sync[8]

    sig rw_fall
    sig rw_rise

    clk_wiz_0 clk_wiz
    sig clk_uart
    always {
        clk_wiz.clk_in100 = clk
        clk_uart = clk_wiz.clk_out400
    }
    #BAUD(100_000_000), #CLK_FREQ(400_000_000) {
        my_uart_tx tx_addr(#DATA_WIDTH(20), .rst(rst), .clk(clk_uart))
        my_uart_tx tx_data(#DATA_WIDTH(8),  .rst(rst), .clk(clk_uart))
        my_uart_tx tx_misc(#DATA_WIDTH(NUM_MISC_SIGNALS), .rst(rst), .clk(clk_uart))
    }
    #ENTRIES(4) {
        async_fifo tx_addr_fifo(#WIDTH(20), .wclk(clk), .wrst(rst), .rclk(clk_uart), .rrst(rst))
        async_fifo tx_data_fifo(#WIDTH(8),  .wclk(clk), .wrst(rst), .rclk(clk_uart), .rrst(rst))
        async_fifo tx_misc_fifo(#WIDTH(NUM_MISC_SIGNALS), .wclk(clk), .wrst(rst), .rclk(clk_uart), .rrst(rst))
    }
    always {
        tx_addr_fifo.rget = 0
        tx_data_fifo.rget = 0
        tx_misc_fifo.rget = 0

        tx_addr.block = 0
        tx_addr.data = 8h00
        tx_addr.new_data = 0

        tx_data.block = 0
        tx_data.data = 8h00
        tx_data.new_data = 0

        tx_misc.block = 0
        tx_misc.data = 8h00
        tx_misc.new_data = 0

        if (!tx_addr.busy && !tx_addr_fifo.empty) {
            tx_addr.new_data = 1
            tx_addr_fifo.rget = 1
            tx_addr.data = tx_addr_fifo.dout
        }

        if (!tx_data.busy && !tx_data_fifo.empty) {
            tx_data.new_data = 1
            tx_data_fifo.rget = 1
            tx_data.data = tx_data_fifo.dout
        }

        if (!tx_misc.busy && !tx_misc_fifo.empty) {
            tx_misc.new_data = 1
            tx_misc_fifo.rget = 1
            tx_misc.data = tx_misc_fifo.dout
        }
    }

    .clk(clk) {
        reset_conditioner reset_cond

        #DEPTH(2) {
            pipeline sync_rw (.in(conn_rw))
            pipeline sync_oe (.in(conn_oe))
            pipeline sync_ci (.in(conn_ci))
            pipeline sync_e2 (.in(conn_e2))

            pipeline sync_mskrom (.in(conn_mskrom))
            pipeline sync_sram1 (.in(conn_sram1))
            pipeline sync_sram2 (.in(conn_sram2))
            pipeline sync_eprom (.in(conn_eprom))
            pipeline sync_stnby (.in(conn_stnby))
            pipeline sync_vbatt (.in(conn_vbatt))
            pipeline sync_vpp (.in(conn_vpp))

            pipeline sync_addr[20] (.in(addr))
            pipeline sync_data[8]  (.in(data))
        }

        edge_detector rw_edge_fall(#RISE(0), #FALL(1), .in(conn_rw_sync)) // want fall
        edge_detector rw_edge_rise(#RISE(1), #FALL(0), .in(conn_rw_sync)) // want rise

        .rst(rst) {
            #BAUD(1_000_000), #CLK_FREQ(100_000_000) {
                uart_tx tx
                uart_rx rx
            }

            fifo fifo(#WIDTH(32), #ENTRIES(32768))
            dff fifo_full_counter[24] // 8 bytes for the Err code

            ft ft(#BUS_WIDTH(16), #TX_BUFFER(8192), .ft_clk(ft_clk), .ft_rxf(ft_rxf), .ft_txe(ft_txe), .ft_data(ft_data), .ft_be(ft_be))

            dff ft_enabled
            dff ft_cur_value[32]
            dff ft_state[$width(FtStates)]

            dff saleae_state[$width(SaleaeStates)]
            dff saleae_counter[8]

            dff last_addr[20]
            dff last_addr_sent
            dff addr_counter[32]

            dff last_data[8]
            dff last_data_sent
            dff data_counter[32]

            dff last_misc[NUM_MISC_SIGNALS]
            dff last_misc_sent
            dff misc_counter[32]
        }
    }

    always {
        reset_cond.in = ~rst_n  // input raw inverted reset signal
        rst = reset_cond.out    // conditioned reset

        led = c{ft.ui_din_full, !ft.ui_dout_empty, !ft_rxf, !ft_txe,
                1b0, fifo.full, fifo.empty, ft_enabled.q}

        usb_tx = tx.tx
        rx.rx = usb_rx
        tx.block = 0
        tx.data = 8h00
        tx.new_data = 0

        tx_addr_fifo.din = 0
        tx_addr_fifo.wput = 0
        tx_data_fifo.din = 0
        tx_data_fifo.wput = 0
        tx_misc_fifo.din = 0
        tx_misc_fifo.wput = 0

        // fifo write
        fifo.wput = 0
        fifo.din = 8h00

        // fifo read
        fifo.rget = 0

        ft_rd = ft.ft_rd
        ft_wr = ft.ft_wr
        ft_oe = ft.ft_oe
        ft.ui_din = 0
        ft.ui_din_be = 0
        ft.ui_din_valid = 0
        ft.ui_dout_get = 0

        conn_rw_sync = sync_rw.out
        conn_ci_sync = sync_ci.out
        conn_oe_sync = sync_oe.out
        conn_e2_sync = sync_e2.out

        conn_mskrom_sync = sync_mskrom.out
        conn_sram1_sync = sync_sram1.out
        conn_sram2_sync = sync_sram2.out
        conn_eprom_sync = sync_eprom.out
        conn_stnby_sync = sync_stnby.out
        conn_vbatt_sync = sync_vbatt.out
        conn_vpp_sync = sync_vpp.out

        misc_sync = c{
            conn_rw_sync,   // bit 10 / 11
            conn_oe_sync,
            conn_ci_sync,
            conn_e2_sync,
            conn_mskrom_sync,
            conn_sram1_sync,
            conn_sram2_sync,
            conn_eprom_sync,
            conn_stnby_sync,
            conn_vbatt_sync,
            conn_vpp_sync   // bit 0
        }

        addr_sync = sync_addr.out
        data_sync = sync_data.out

        fifo_full_counter.d = 0
        rw_fall = rw_edge_fall.out
        rw_rise = rw_edge_rise.out
        // mreq_fall = mreq_edge.out
        // iorq_fall = iorq_edge.out
        // rd_rise = rd_edge.out
        // wr_rise = wr_edge.out

        case (ft_state.q) {
            FtStates.GET_FIFO:
                if (!fifo.empty) {
                    if (!ft.ui_din_full) {
                        fifo.rget = 1

                        ft_cur_value.d = fifo.dout
                        ft.ui_din = fifo.dout[0+:16]
                        ft.ui_din_be = b11
                        ft.ui_din_valid = 1

                        ft_state.d = FtStates.STREAM
                    }
                }

            FtStates.STREAM:
                if (!ft.ui_din_full) {
                    fifo.rget = 1

                    ft.ui_din = ft_cur_value.q[16+:16]
                    ft.ui_din_be = b11
                    ft.ui_din_valid = 1

                    ft_state.d = FtStates.GET_FIFO
                }
        }

        if (last_addr.q != addr_sync) {
            last_addr.d = addr_sync
            addr_counter.d = 0
            last_addr_sent.d = 0
        } else {
            addr_counter.d = addr_counter.q + 1
            if (last_addr_sent.q == 0 && addr_counter.q > 5) {
                last_addr_sent.d = 1

                tx_addr_fifo.wput = 1
                // tx_addr_fifo.din = c{6b0, addr_sync}
                tx_addr_fifo.din = addr_sync
            }
        }

        if (last_data.q != data_sync) {
            last_data.d = data_sync
            data_counter.d = 0
            last_data_sent.d = 0
        } else {
            data_counter.d = data_counter.q + 1
            if (last_data_sent.q == 0 && data_counter.q > 5) {
                last_data_sent.d = 1

                tx_data_fifo.wput = 1
                tx_data_fifo.din = data_sync
            }
        }

        if (last_misc.q != misc_sync) {
            last_misc.d = misc_sync
            misc_counter.d = 0
            last_misc_sent.d = 0
        } else {
            misc_counter.d = misc_counter.q + 1
            if (last_misc_sent.q == 0 && misc_counter.q > 5) {
                last_misc_sent.d = 1

                tx_misc_fifo.wput = 1
                tx_misc_fifo.din = misc_sync
            }
        }

        if (!ft.ui_dout_empty) {
            ft.ui_dout_get = 1
            if (ft.ui_dout[0+:8] == "S" && ft.ui_dout[8+:8] == "+") {
                ft_enabled.d = 1 // enable decoded bus streaming
                if (!tx.busy) {
                    tx.new_data = 1
                    tx.data = "+"
                }
            } else if (ft.ui_dout[0+:8] == "S" && ft.ui_dout[8+:8] == "-") {
                ft_enabled.d = 0 // disable decoded bus streaming
                if (!tx.busy) {
                    tx.new_data = 1
                    tx.data = "-"
                }
            }
        }

        if (rx.new_data) {
            if (rx.data == "c") {
                saleae_state.d = SaleaeStates.COUNTER
                if (!tx.busy) {
                    tx.new_data = 1
                    tx.data = "c"
                }
            } else if (rx.data == "s") {
                saleae_state.d = SaleaeStates.SYNC_SIGNALS
                if (!tx.busy) {
                    tx.new_data = 1
                    tx.data = "s"
                }
            }
        }

        // NB: rightmost bit is pin0
        case (saleae_state.q) {
            // check that pins are mapped/read in the correct order
            SaleaeStates.COUNTER:
                saleae = saleae_counter.q
                saleae_counter.d = saleae_counter.q + 1

            SaleaeStates.SYNC_SIGNALS:
                saleae = c{
                    tx_addr.tx,
                    tx_data.tx,
                    tx_misc.tx,
                    conn_mskrom_sync,
                    conn_e2_sync,
                    conn_ci_sync,
                    conn_oe_sync,
                    conn_rw_sync
                }

            default:
                saleae = 0
        }
    }
}
