; Generated by JITX 3.25.0
#use-added-syntax(jitx)
defpackage main :
  import core
  import jitx
  import jitx/commands
  import jitx/parts

  import helpers
  import jsl
  import collections

; public pcb-routing-structure power-lines :
;   name = "power traces"
;   layer-constraints(Top) :
;     trace-width = 0.5       ; mm
;     clearance = 0.2         ; mm
;     velocity = 0.19e12      ; mm/s
;     insertion-loss = 0.008  ; db/mm @ 1GHz
;     neck-down = NeckDown(0.5 0.12 false false)

; topo-net(vcca => fpga.P39 => fpga.P40)
; structure(fpga.P39 => fpga.P40) = power-lines

val board-shape = RoundedRectangle(
  components/AlchitryAu/element_width,
  components/AlchitryAu/element_height + 5.0, 3.0)

pcb-module my-design :
  inst calc : components/PCG850Bus/component
  inst fpga : components/FPGAHeader/component
  inst shift : components/LevelShifter/module[5]

  port gnd
  port vccb
  port vcca
  net GND (gnd)
  net VCCB (vccb)
  net VCCA (vcca)

  net (vcca fpga.P39 fpga.P40)
  net (gnd  fpga.P1  fpga.P2)

  net (vccb calc.VCCB1 calc.VCCB2)
  net (gnd  calc.GND1  calc.GND2)

  for i in 0 to 5 do:
    net (gnd shift[i].gnd)
    net (vccb shift[i].vcchi)
    net (vcca shift[i].vcclo)
    net (vcca shift[i].oe)

  defn do-shift (shiftno:Int, pinno:Int, high:JITXObject, low:JITXObject) :
    val low-name = replace(to-string(ref(high)), "calc.", "lo") as String
    net (high shift[shiftno].PT[pinno].B)
    make-net(to-symbol(low-name), [low, shift[shiftno].PT[pinno].A])

  ; rearranging the connections to make single-level layout easier
  do-shift(0, 7, calc.IORQ,    fpga.P3)
  do-shift(0, 6, calc.IORESET, fpga.P4)
  do-shift(0, 5, calc.RD,      fpga.P5)
  do-shift(0, 4, calc.M1,      fpga.P6)
  do-shift(0, 3, calc.WR,      fpga.P7)
  do-shift(0, 2, calc.WAIT,    fpga.P8)
  do-shift(0, 1, calc.MREQ,    fpga.P9)
  do-shift(0, 0, calc.INT1,    fpga.P10)

  do-shift(1, 7, calc.BNK1,    fpga.P11)
  do-shift(1, 6, calc.BNK0,    fpga.P12)
  do-shift(1, 5, calc.CEROM2,  fpga.P13)
  do-shift(1, 4, calc.CERAM2,  fpga.P14)
  do-shift(1, 3, calc.D7,      fpga.P15)
  do-shift(1, 2, calc.D6,      fpga.P16)
  do-shift(1, 1, calc.D5,      fpga.P17)
  do-shift(1, 0, calc.D4,      fpga.P18)

  do-shift(2, 7, calc.D3,      fpga.P19)
  do-shift(2, 6, calc.D2,      fpga.P20)
  do-shift(2, 5, calc.D1,      fpga.P21)
  do-shift(2, 4, calc.D0,      fpga.P22)
  do-shift(2, 3, calc.A15,     fpga.P23)
  do-shift(2, 2, calc.A14,     fpga.P24)
  do-shift(2, 1, calc.A13,     fpga.P25)
  do-shift(2, 0, calc.A12,     fpga.P26)

  do-shift(3, 7, calc.A11,     fpga.P27)
  do-shift(3, 6, calc.A10,     fpga.P28)
  do-shift(3, 5, calc.A9,      fpga.P29)
  do-shift(3, 4, calc.A8,      fpga.P30)
  do-shift(3, 3, calc.A7,      fpga.P31)
  do-shift(3, 2, calc.A6,      fpga.P32)
  do-shift(3, 1, calc.A5,      fpga.P33)
  do-shift(3, 0, calc.A4,      fpga.P34)

  do-shift(4, 7, calc.A3,      fpga.P35)
  do-shift(4, 6, calc.A2,      fpga.P36)
  do-shift(4, 5, calc.A1,      fpga.P37)
  do-shift(4, 4, calc.A0,      fpga.P38)

  geom(GND) :
    copper-pour(LayerIndex(0),         isolate = 0.15, rank = 1) = board-shape
    copper-pour(LayerIndex(0, Bottom), isolate = 0.15, rank = 1) = board-shape

  symbol(GND) = GND-SYMB
  symbol(VCCA) = PWR-SYMB
  symbol(VCCB) = PWR-SYMB

defstruct Conn :
  start_index : Int
  shifter_index : Int
  invert_shifter_index : True|False
  fpga_port : JITXObject
  shifter_start_index : Int
  fpga_pins : Vector<Int>

pcb-module alchitry-level-shifter :
  inst fpga : components/AlchitryAu/alchitry_element_bottom
  place(fpga) at loc(0.0, 0.0, 0.0) on Top

  inst ffc1 : components/FFCConnector/module
  inst ffc2 : components/FFCConnector/module

  port gnd
  port vcc3v3
  port vcc5v
  net GND (gnd fpga.GND ffc1.GND ffc2.GND)
  net VCC3V3 (vcc3v3 fpga.VCC3V3)
  net VCC5V (vcc5v ffc1.VCC5V ffc2.VCC5V)

  val num_shifters = 6
  inst shift : components/LevelShifter/module[num_shifters]
  for i in 0 to num_shifters do:
    net (gnd shift[i].gnd)
    net (vcc5v shift[i].vcchi)
    net (vcc3v3 shift[i].vcclo)
    net (vcc3v3 shift[i].oe)

  for i in 0 to 48 :
    net (ffc1.data[i] ffc2.data[i])

  symbol(GND) = GND-SYMB
  symbol(VCC3V3) = PWR-SYMB
  symbol(VCC5V) = PWR-SYMB

  defn do-shift (shiftno:Int, pinno:Int, high:JITXObject, low:JITXObject) :
    ; println(to-string(ref(high)))
    var low-name = replace(to-string(ref(high)), "ffc1.data", "loDATA") as String
    low-name = replace(low-name, "[", "")
    low-name = replace(low-name, "]", "")
    net (high shift[shiftno].PT[pinno].B)
    make-net(to-symbol(low-name), [low, shift[shiftno].PT[pinno].A])

  defn gen-seq (start:Int) :
    val seq = Vector<Int>()
    for i in 0 to 8 :
      add(seq, start + i)
    seq

  ; println(gen-seq(0))
  ; println(gen-seq(8)[1])

  val conversion = [
                                                             ;1 2 3 4 5 6 7 8
    Conn(0,  0, false, fpga.data_a, 0, to-vector<Int>(to-seq([1 3 5 7 0 2 4 6]))),
    Conn(8,  4, true,  fpga.data_c, 0, to-vector<Int>(to-seq([0 2 4 6 1 3 5 7]))),
    Conn(16, 1, false, fpga.data_a, 0, to-vector<Int>(to-seq([8 10 12 14 16 18 22 23]))),
    Conn(24, 2, true,  fpga.data_c, 0, to-vector<Int>(to-seq([9 11 13 15 17 19 21 23]))),
    Conn(32, 3, true,  fpga.data_c, 0, to-vector<Int>(to-seq([25 27 29 31]))),
    Conn(34, 3, true,  fpga.data_d, 4, to-vector<Int>(to-seq([0 2 1 3]))),
    Conn(40, 5, false, fpga.data_b, 0, to-vector<Int>(to-seq([1 3 5 7 0 2 4 6])))
  ]

  for i in conversion :
    val start_index = start_index(i)
    val shifter_index = shifter_index(i)
    val fpga_port = fpga_port(i)

    for j in 0 to length(fpga_pins(i)) do :
      val data_index = start_index + j
      val fpga_index = fpga_pins(i)[j]
      val shifter_pin = if invert_shifter_index(i) :
        7 - j - shifter_start_index(i)
      else :
        j + shifter_start_index(i)
      ; println(data_index)
      do-shift(shifter_index, shifter_pin, ffc1.data[data_index], fpga_port[fpga_index])

  val shifter_pos = [
    loc(14.734, 9.4680, 270.0), ; 0
    loc(4.8113, 9.4680, 270.0), ; 1
    loc(0.3, -9.4680, 90.0), ; 2
    loc(-9.2, -9.4680, 90.0), ; 3
    loc(9.8165, -9.4680, 90.0), ; 4
    loc(-12.0, 9.4680, 270.0) ; 5
  ]
  for (myloc in shifter_pos, i in 0 to false) :
    place(shift[i]) at myloc on Top

  val ffc_distance = components/FFCConnector/height + 2.0
  val ffc_offset_y = 0.75
  place(ffc1) at loc(2.3960, ffc_offset_y + ffc_distance / -2.0, 180.0) on Bottom
  place(ffc2) at loc(2.3960, ffc_offset_y + ffc_distance / 2.0, 180.0) on Bottom

  geom(GND) :
    copper-pour(LayerIndex(0),         isolate = 0.15, rank = 1) = board-shape
    copper-pour(LayerIndex(0, Bottom), isolate = 0.15, rank = 1) = board-shape

; Set the :
;     design-name     - a directory with this name will be created in the "designs" directory
;     board           - a Board object representing the stackup, rules and board shape for a particular design
;     signal-shrink   - a distance in mm to pull back copper signals from the board edge
setup-design("alchitry-level-shifter", board-shape, signal-shrink = 0.5)

set-main-module(alchitry-level-shifter)

; view-bom(BOM-STD)
view-schematic()
view-board()


