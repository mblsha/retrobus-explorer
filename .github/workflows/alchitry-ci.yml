name: Alchitry Labs V2 CI

on:
  push:
    branches: [ master, main ]
    paths:
      - 'gateware/**'
      - '.github/**'
  pull_request:
    branches: [ master, main ]
    paths:
      - 'gateware/**'
      - '.github/**'

jobs:
  check-projects:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        project:
          - test-minimal
          - pin-tester
          - sharp-organizer-card
          - sharp-pc-g850-bus
          - sharp-pc-g850-streaming-rom
      fail-fast: false
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Get latest Alchitry Labs version
      id: get-version
      run: |
        LATEST_VERSION=$(curl -s https://api.github.com/repos/alchitry/Alchitry-Labs-V2/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
        echo "version=${LATEST_VERSION}" >> $GITHUB_OUTPUT
        echo "Latest Alchitry Labs version: ${LATEST_VERSION}"
    
    - name: Cache Alchitry Labs installation
      uses: actions/cache@v4
      with:
        path: |
          ~/alchitry-labs
          ~/.cache/alchitry
        key: alchitry-labs-v2-${{ runner.os }}-${{ steps.get-version.outputs.version }}
        restore-keys: |
          alchitry-labs-v2-${{ runner.os }}-
    
    - name: Install Alchitry Labs V2
      run: |
        export ALCHITRY_VERSION="${{ steps.get-version.outputs.version }}"
        ./.github/install-alchitry-labs.sh
    
    - name: Check project syntax and build
      run: |
        cd gateware/${{ matrix.project }}
        echo "Checking project: ${{ matrix.project }}"
        
        # Check if project file exists
        PROJECT_FILE="${{ matrix.project }}.alp"
        if [ ! -f "$PROJECT_FILE" ]; then
          echo "Error: Project file $PROJECT_FILE not found"
          exit 1
        fi
        
        echo "Found project file: $PROJECT_FILE"
        
        # Run syntax check using the binary path from previous step
        echo "Running syntax check..."
        
        # Convert to absolute path as alchitry expects absolute paths
        PROJECT_ABS_PATH="$(pwd)/$PROJECT_FILE"
        echo "Using absolute path: $PROJECT_ABS_PATH"
        
        # Run the check and capture output to detect failures
        if "$ALCHITRY_BIN" check "$PROJECT_ABS_PATH" 2>&1 | tee check_output.log; then
          # Check if the output contains failure messages
          if grep -q "Failed to open project" check_output.log; then
            echo "‚ùå Project check failed - could not open project file"
            cat check_output.log
            exit 1
          elif grep -q "error\|Error\|ERROR" check_output.log; then
            echo "‚ùå Project check failed - errors found"
            cat check_output.log
            exit 1
          else
            echo "‚úÖ Project syntax check completed successfully"
          fi
        else
          echo "‚ùå alchitry command failed with exit code $?"
          exit 1
        fi
        
        echo "‚úÖ Project ${{ matrix.project }} passed syntax check"
    
    - name: Run test benches (if available)
      run: |
        cd gateware/${{ matrix.project }}
        echo "Checking for test benches in project: ${{ matrix.project }}"
        
        PROJECT_FILE="${{ matrix.project }}.alp"
        PROJECT_ABS_PATH="$(pwd)/$PROJECT_FILE"
        
        # Check if project has test benches
        if "$ALCHITRY_BIN" sim "$PROJECT_ABS_PATH" --list 2>&1 | grep -q "Tests:"; then
          echo "üìã Test benches found, running simulation tests..."
          
          # Run all test benches and capture output
          if "$ALCHITRY_BIN" sim "$PROJECT_ABS_PATH" 2>&1 | tee sim_output.log; then
            # Check if any tests failed
            if grep -q "failed\|Failed\|FAILED\|Error\|ERROR" sim_output.log; then
              echo "‚ùå Test bench execution failed"
              cat sim_output.log
              exit 1
            elif grep -q "passed!" sim_output.log; then
              echo "‚úÖ All test benches passed successfully"
              # Show a summary of passed tests
              grep "passed!" sim_output.log
            else
              echo "‚ö†Ô∏è Test benches ran but no clear pass/fail indication found"
              cat sim_output.log
            fi
          else
            echo "‚ùå Test bench execution failed with exit code $?"
            exit 1
          fi
        else
          echo "‚ÑπÔ∏è No test benches found for project ${{ matrix.project }}, skipping simulation tests"
        fi
    
    - name: Upload build artifacts (if any)
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: build-logs-${{ matrix.project }}
        path: |
          gateware/${{ matrix.project }}/*.log
          gateware/${{ matrix.project }}/build/
        retention-days: 7
        if-no-files-found: ignore

  summary:
    runs-on: ubuntu-latest
    needs: check-projects
    if: always()
    
    steps:
    - name: Check overall status
      run: |
        if [ "${{ needs.check-projects.result }}" == "success" ]; then
          echo "‚úÖ All Alchitry Labs V2 projects passed syntax checks!"
        else
          echo "‚ùå Some Alchitry Labs V2 projects failed syntax checks"
          exit 1
        fi
