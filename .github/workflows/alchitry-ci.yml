name: Alchitry Labs V2 CI

on:
  push:
    branches: [ master, main ]
    paths:
      - 'gateware/**'
      - '.github/workflows/alchitry-ci.yml'
  pull_request:
    branches: [ master, main ]
    paths:
      - 'gateware/**'
      - '.github/workflows/alchitry-ci.yml'

jobs:
  check-projects:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        project:
          - pin-tester
          - sharp-organizer-card
          - sharp-pc-g850-bus
          - sharp-pc-g850-streaming-rom
      fail-fast: false
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Get latest Alchitry Labs version
      id: get-version
      run: |
        LATEST_VERSION=$(curl -s https://api.github.com/repos/alchitry/Alchitry-Labs-V2/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
        echo "version=${LATEST_VERSION}" >> $GITHUB_OUTPUT
        echo "Latest Alchitry Labs version: ${LATEST_VERSION}"
    
    - name: Cache Alchitry Labs installation
      uses: actions/cache@v4
      with:
        path: |
          ~/alchitry-labs
          ~/.cache/alchitry
        key: alchitry-labs-v2-${{ runner.os }}-${{ steps.get-version.outputs.version }}
        restore-keys: |
          alchitry-labs-v2-${{ runner.os }}-
    
    - name: Download and install Alchitry Labs V2
      run: |
        # Use version from previous step
        LATEST_VERSION="${{ steps.get-version.outputs.version }}"
        echo "Installing Alchitry Labs V2 version: $LATEST_VERSION"
        
        # Check if already cached
        if [ -d "$HOME/alchitry-labs/alchitry-labs-${LATEST_VERSION}" ]; then
          echo "Alchitry Labs already cached, skipping download"
        else
          # Create installation directory
          mkdir -p $HOME/alchitry-labs
          cd $HOME/alchitry-labs
          
          # Download the latest Alchitry Labs V2 tar.gz package
          echo "Downloading Alchitry Labs V2..."
          wget -q "https://github.com/alchitry/Alchitry-Labs-V2/releases/download/${LATEST_VERSION}/alchitry-labs-${LATEST_VERSION}-linux-amd64.tar.gz"
          
          # Extract the tar.gz package
          echo "Extracting Alchitry Labs V2..."
          tar -xzf "alchitry-labs-${LATEST_VERSION}-linux-amd64.tar.gz"
          
          # Clean up archive
          rm "alchitry-labs-${LATEST_VERSION}-linux-amd64.tar.gz"
        fi
        
        # Debug: List the extracted contents to understand the structure
        echo "Contents of extracted directory:"
        ls -la "$HOME/alchitry-labs/alchitry-labs-${LATEST_VERSION}/" || echo "Directory not found, listing parent:"
        ls -la "$HOME/alchitry-labs/"
        
        # Find the actual binary location
        echo "Looking for alchitry binary:"
        find "$HOME/alchitry-labs/" -name "alchitry*" -type f 2>/dev/null || echo "No alchitry binary found"
        
        # Store version for later steps
        echo "ALCHITRY_VERSION=${LATEST_VERSION}" >> $GITHUB_ENV
    
    - name: Verify Alchitry Labs installation
      run: |
        echo "Verifying Alchitry Labs installation..."
        
        # Find the alchitry binary
        ALCHITRY_BIN=$(find "$HOME/alchitry-labs/" -name "alchitry" -type f 2>/dev/null | head -1)
        
        if [ -z "$ALCHITRY_BIN" ]; then
          echo "❌ Could not find alchitry binary"
          exit 1
        fi
        
        echo "Found alchitry binary at: $ALCHITRY_BIN"
        chmod +x "$ALCHITRY_BIN"
        
        # Store the binary path for later steps
        echo "ALCHITRY_BIN=$ALCHITRY_BIN" >> $GITHUB_ENV
        
        # Test the binary
        "$ALCHITRY_BIN" --help || echo "Binary found but help command failed"
    
    - name: Check project syntax and build
      run: |
        cd gateware/${{ matrix.project }}
        echo "Checking project: ${{ matrix.project }}"
        
        # Check if project file exists
        PROJECT_FILE="${{ matrix.project }}.alp"
        if [ ! -f "$PROJECT_FILE" ]; then
          echo "Error: Project file $PROJECT_FILE not found"
          exit 1
        fi
        
        echo "Found project file: $PROJECT_FILE"
        
        # Run syntax check using the binary path from previous step
        echo "Running syntax check..."
        "$ALCHITRY_BIN" check "$PROJECT_FILE"
        
        echo "✅ Project ${{ matrix.project }} passed syntax check"
    
    - name: Upload build artifacts (if any)
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: build-logs-${{ matrix.project }}
        path: |
          gateware/${{ matrix.project }}/*.log
          gateware/${{ matrix.project }}/build/
        retention-days: 7
        if-no-files-found: ignore

  summary:
    runs-on: ubuntu-latest
    needs: check-projects
    if: always()
    
    steps:
    - name: Check overall status
      run: |
        if [ "${{ needs.check-projects.result }}" == "success" ]; then
          echo "✅ All Alchitry Labs V2 projects passed syntax checks!"
        else
          echo "❌ Some Alchitry Labs V2 projects failed syntax checks"
          exit 1
        fi
