# Environment configuration for FuseSoC builds
# Copy this to .env and adjust paths for your system
# 
# This file centralizes all environment configuration for the build system.
# All variables are documented here to avoid duplication in documentation files.

# ============================================================================
# VIVADO CONFIGURATION
# ============================================================================

# Vivado installation path (Windows format)
# Used by the build system to generate Windows-compatible commands
# Example: C:\Xilinx\Vivado\2024.2
VIVADO_WIN_PATH=C:\Xilinx\Vivado\2024.2

# Vivado installation path (WSL mapping)
# Used by WSL to access the Windows Vivado installation
# Example: /mnt/c/Xilinx/Vivado/2024.2
VIVADO_WSL_PATH=/mnt/c/Xilinx/Vivado/2024.2

# Number of parallel jobs for synthesis
# Controls Vivado's parallelism during synthesis and implementation
# Higher values use more CPU/memory but may be faster
# Recommended: 4-8 for most systems
VIVADO_JOBS=8

# Additional Vivado command-line flags (optional)
# Add any extra flags to pass to Vivado during synthesis
# Example: -verbose for more detailed output
VIVADO_EXTRA_FLAGS=

# ============================================================================
# PYTHON ENVIRONMENT
# ============================================================================

# Python environment name for FuseSoC
# This should be the name of your pyenv environment with FuseSoC installed
# Create with: pyenv virtualenv 3.10.11 fusesoc
FUSESOC_PYENV=fusesoc

# ============================================================================
# BUILD SYSTEM CONFIGURATION
# ============================================================================

# Build directory (relative to project root)
# Where FuseSoC will create its build artifacts
# This directory can be safely deleted to clean builds
BUILD_ROOT=build_fusesoc

# FuseSoC cache directory
# Where FuseSoC stores cached library information
# This directory can be safely deleted to refresh libraries
FUSESOC_CACHE=.fusesoc_cache

# Logging level for console output
# Available levels: DEBUG, INFO, WARNING, ERROR
# - DEBUG: Detailed information including all commands
# - INFO: Normal build progress (recommended)
# - WARNING: Only warnings and errors
# - ERROR: Only errors
# Note: File logs always capture DEBUG level regardless of this setting
LOG_LEVEL=INFO

# WSL distribution name (if not using default)
# Only needed if you have multiple WSL distributions
# Leave empty to use the default distribution
WSL_DISTRO=Ubuntu

# ============================================================================
# REMOTE BUILD CONFIGURATION (OPTIONAL)
# ============================================================================
# These settings are used for distributed builds or when building on a remote
# Windows machine. Configure these if you want to run builds remotely.

# SSH configuration for remote command execution
# Used to run build commands on a remote Windows/WSL machine
SSH_USER=sshuser
SSH_HOST=hostname
SSH_PORT=22

# SCP configuration for file transfers
# Used to copy gateware directory to remote machine and results back
# Note: May have different username/port than SSH
SCP_USER=scpuser
SCP_HOST=hostname
SCP_PORT=2222

# Remote work directory (optional)
# Temporary directory on remote machine for builds
# Default: /tmp/retrobus-build-$$ (where $$ is process ID)
# REMOTE_WORK_DIR=/tmp/my-custom-build-dir

# ============================================================================
# FPGA CONFIGURATION
# ============================================================================
# Note: FPGA part numbers are configured per-project in FuseSoC core files
# This allows different projects to target different FPGA boards and parts
# See gateware/chisel/cores/*.core files for part-specific configuration

# ============================================================================
# USAGE EXAMPLES
# ============================================================================
# 
# Basic setup:
# 1. Copy this file: cp .env.example .env
# 2. Edit .env and set your Vivado paths
# 3. Run: ./gateware/build-scripts/build_fusesoc.sh pin-tester
#
# Debug logging:
# 1. Set LOG_LEVEL=DEBUG in .env
# 2. Run build as normal
# 3. Check logs/ directory for detailed output
#
# Remote builds:
# 1. Set SSH_* and SCP_* variables for your remote machine
# 2. Run: ./gateware/build-scripts/build_local.sh pin-tester
# 3. The script will automatically copy gateware/ to the remote machine
#
# Clean build:
# 1. Delete build_fusesoc/ and .fusesoc_cache/ directories
# 2. Run build as normal