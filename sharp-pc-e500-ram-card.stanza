; Generated by JITX 3.25.0
#use-added-syntax(jitx)
defpackage sharp-pc-e500 :
  import core
  import jitx
  import jitx/commands
  import jitx/parts

  import helpers
  import jsl
  import collections

  ; gen-testpad
  import ocdb/utils/generic-components
  ; get-time-string
  import utils/time

; RAM Card connector based on the measurements from
; https://github.com/hwreverse/e500memcards
val board-shape = RoundedRectangle(
  54.0,
  42.0, 2.0)

val bigpad-w = 2.0
val bigpad-h = 10.0
val bigpad-name = "big-pad"
val big-pitch = 44.7

val lilpad-w = 0.8
val lilpad-h = 10.0
val lilpad-name = "lil-pad"
val lil-pitch = 1.27

val biglil-gap = 0.6

pcb-pad my-pad (name:String, _w:Double, _h:Double) :
  name = "big-pad"
  type = SMD

  val _reduce = 0.1

  shape = Rectangle(_w - _reduce, _h - _reduce)
  layer(SolderMask(Top)) = Rectangle(_w, _h)
  layer(Paste(Top))      = Rectangle(_w, _h)

pcb-landpattern lp :
  ; 33 lil pads + 2 big
  val num_pads = 33

  for i in 0 to 2 :
    val start-x = width(board-shape) / -2.0 + 3.7 + bigpad-w / 2.0
    val x = start-x + big-pitch * to-double(i)
    println(x)
    pad p[1 + i] : my-pad(bigpad-name, bigpad-w, bigpad-h) at loc(x, 0.0) on Top

  for i in 0 to num_pads :
    val start-x = width(board-shape) / -2.0 + 6.34 + lilpad-w / 2.0
    val x = start-x + lil-pitch * to-double(i)
    pad p[3 + i] : my-pad(lilpad-name, lilpad-w, lilpad-h) at loc(x, 0.0) on Top

pcb-component ramcard :
  name = "pc-g850-ram-card"
  description = "SHARP PC-G850 RAM card connector"
  manufacturer = "SHARP"
  reference-prefix = "J"

  pin-properties :
    [pin:Ref | pads:Int ... | side:Dir ]
    [VCC     | 1            | Left     ]
    [GND     | 2            | Left    ]
    [VCC1    | 3            | Left    ]
    [RW      | 4            | Left    ]
    [A0      | 5            | Left    ]
    [A1      | 6            | Left    ]
    [A2      | 7            | Left    ]
    [A3      | 8            | Left    ]
    [A4      | 9            | Left    ]
    [A5      | 10           | Left    ]
    [A6      | 11           | Left    ]
    [A7      | 12           | Left    ]
    [A8      | 13           | Left    ]
    [A9      | 14           | Left    ]
    [A10     | 15           | Left    ]
    [A11     | 16           | Left    ]
    [A12     | 17           | Left    ]
    [A13     | 18           | Left    ]
    [A14     | 19           | Left    ]
    [A15     | 20           | Left    ]
    [A16     | 21           | Left    ]
    [A17     | 22           | Left    ]
    [VCC2    | 23           | Left    ]
    [D0      | 24           | Left    ]
    [D1      | 25           | Left    ]
    [D2      | 26           | Left    ]
    [D3      | 27           | Left    ]
    [D4      | 28           | Left    ]
    [D5      | 29           | Left    ]
    [D6      | 30           | Left    ]
    [D7      | 31           | Left    ]
    [CE1     | 32           | Left    ]
    [CE6     | 33           | Left    ]
    [NC      | 34           | Left    ]
    [OE      | 35           | Left    ]

  val box = BoxSymbol(self)
  val symb = create-symbol(box)
  assign-symbol(symb)

  assign-landpattern(lp)

pcb-module module :
  ; NOTE: need to have flipped pins to match the main board.
  inst ffc : components/FFCConnector/module(flip_pins = true)

  inst bus : ramcard

  port gnd
  port vcc
  net GND (gnd ffc.GND)
  net VCC (vcc ffc.VCC5V)

  net (gnd bus.GND)
  net (vcc bus.VCC)

  val data = [
    bus.VCC1
    bus.RW
    bus.A0
    bus.A1
    bus.A2
    bus.A3
    bus.A4
    bus.A5
    bus.A6
    bus.A7
    bus.A8
    bus.A9
    bus.A10
    bus.A11
    bus.A12
    bus.A13
    bus.A14
    bus.A15
    bus.A16
    bus.A17
    bus.VCC2
    bus.D0
    bus.D1
    bus.D2
    bus.D3
    bus.D4
    bus.D5
    bus.D6
    bus.D7
    bus.CE1
    bus.CE6
    bus.NC
    bus.OE
  ]

  for i in 0 to length(data) do :
    net (data[i] ffc.data[i])

  val dx = -0.0
  place(ffc) at loc(0.0, 0.0, 180.0) on Bottom
  place(bus) at loc(0.0, height(board-shape) / 2.0 - bigpad-h / 2.0) on Top

  val mydate:String = get-time-string("%Y-%m-%d")
  val label-text = append("SHARP PC-E500 adapter v1 (c) mblsha ", mydate)
  inst version-label : ocdb/artwork/board-text/text(label-text, 1.5, 0.0)
  val label_y = height(board-shape) / -2.0 + 2.0
  place(version-label) at loc(0.0, label_y, 180.0) on Bottom

setup-design("sharp-pc-e500", board-shape, signal-shrink = 0.5)
set-main-module(module)
view-schematic()
view-board()
export-to-cad()


